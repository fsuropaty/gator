// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feeds.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (
	id,
	created_at,
	updated_at,
	name,
	url,
	user_id
	) 
VALUES ( $1, $2, $3, $4, $5, $6 )
RETURNING id, created_at, updated_at, name, url, user_id
`

type CreateFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getFeedsByURL = `-- name: GetFeedsByURL :one
SELECT id, name, url 
FROM feeds 
WHERE url = $1
`

type GetFeedsByURLRow struct {
	ID   uuid.UUID
	Name string
	Url  string
}

func (q *Queries) GetFeedsByURL(ctx context.Context, url string) (GetFeedsByURLRow, error) {
	row := q.db.QueryRowContext(ctx, getFeedsByURL, url)
	var i GetFeedsByURLRow
	err := row.Scan(&i.ID, &i.Name, &i.Url)
	return i, err
}

const getFeedsList = `-- name: GetFeedsList :many
SELECT feeds.name, feeds.url, users.name AS user_name 
FROM feeds
INNER JOIN users
ON feeds.user_id = users.id
`

type GetFeedsListRow struct {
	Name     string
	Url      string
	UserName string
}

func (q *Queries) GetFeedsList(ctx context.Context) ([]GetFeedsListRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsListRow
	for rows.Next() {
		var i GetFeedsListRow
		if err := rows.Scan(&i.Name, &i.Url, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
